@model InvoiceManager.Models.ViewModels.EditInvoiceViewModel
@{
    ViewBag.Title = Model.Heading;
}

<h2 class="mb-3">@Model.Heading</h2>

@if (Model.Invoice.Id != 0)
{
    <button class="btn btn-primary mb-3"
            onclick='window.location.href="@Url.Action("InvoicePosition","Home", new { invoiceId = Model.Invoice.Id })"'>
        Dodaj pozycję
    </button>
    <button class="btn btn-secondary mb-3"
            onclick="generatePdf()">
        Generuj Pdf
    </button>
}

<div class="row">
    <div class="col-lg-6">
        @using (Html.BeginForm("Invoice", "Home"))
        {

            if (Model.Invoice.Id == 0)
            {
                <p class="alert alert-info mt-4 mb-4">
                    Pola tytuł, klient, sposób płatności i termin są
                    <strong>wymagane</strong>.
                </p>
            }
            @Html.HiddenFor(x => x.Invoice.Id)
            @Html.HiddenFor(x => x.Invoice.UserId)
            @Html.HiddenFor(x => x.Invoice.CreatedDate)


            <div class="form-group">
                @Html.LabelFor(x => x.Invoice.Title)
                @Html.TextBoxFor(x => x.Invoice.Title,
               new { @class = "form-control", autofocus = "autofocus" })
                @Html.ValidationMessageFor(x => x.Invoice.Title)
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.Invoice.ClientId)
                @Html.DropDownListFor(x => x.Invoice.ClientId,
               new SelectList(Model.Clients, "Id", "Name"), "--Wybierz klienta--",
               new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Invoice.ClientId)
            </div>

            if (Model.Invoice.Id != 0)
            {
                <div class="form-group">
                    @Html.LabelFor(x => x.Invoice.Value)
                    @Html.TextBoxFor(x => x.Invoice.Value,
                   new { @class = "form-control", @readonly = "readonly" })
                </div>
            }

            <div class="form-group">
                @Html.LabelFor(x => x.Invoice.MethodOfPaymandId)
                @Html.DropDownListFor(x => x.Invoice.MethodOfPaymandId,
               new SelectList(Model.MethodOfPaymands, "Id", "Name"), "--Wybierz sposób płatości--",
               new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Invoice.MethodOfPaymandId)
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.Invoice.PaymandDate)
                @Html.TextBoxFor(x => x.Invoice.PaymandDate, "{0:dd-MM-yyyy}",
                    new { @class = "form-control", @id = "PaymendDate", autocomplete = "off" })
                @Html.ValidationMessageFor(x => x.Invoice.PaymandDate)
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.Invoice.Comments)
                @Html.TextAreaFor(x => x.Invoice.Comments,
                    new { @class = "form-control" })
            </div>

            <button class="btn btn-primary btn-lg mb-5 mt-3"
                    type="submit">
                Zapisz
            </button>

        }
    </div>
    <div class="col-5 offset-1">
        @if (Model.Invoice.Id != 0)
        {
            @Html.Partial("_InvoicePosition", Model.Invoice.InvoicePositions)
        }
    </div>
</div>







@section Scripts
{

    <script typr="text/javascript">

        function generatePdf() {

            $.ajax({

                type: 'POST',
                url: "@Url.Action("InvoiceToPdf", "Print")",
                data: {
                    id: '@Model.Invoice.Id'

                },
                success: function (data) {
                    window.Location = '@Url.Action("DownloadInvoicePdf","Print")'
                        + '?fileGuid=' + data.FileGuid + '&fileName=' + data.FileName;
                },
                error: function (data) {
                    alert(data.Message);
                },
                dataType: 'json',
                cache: false
                });
        }
        function deleteInvoicePosition(id, invoiceId, btn) {

            if (!confirm("Czy napewno chcesz usunąć pozycje?"))
                return;

            $.ajax({

                type: 'POST',
                url: "@Url.Action("DeletePosition", "Home")",
                data: {
                    id: id,
                    invoiceId: invoiceId
                },
                success: function (data) {
                    if (data.Success) {
                        var row = btn.parentNode.parentNode;
                        row.parentNode.removeChild(row);

                        $('#Invoice_Value').val(data.InvoiceValue.toFixed(2).replace(",","."));
                    } else {
                        alert(data.Message);
                    }
                },
                error: function (data) {
                    alert(data.Message);
                },
                dataType: 'json'

            });

        };

        $(document).ready(function () {

            $.validator.methods.number = function (value, element) {
                return this.optinal(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
            }

            $.validator.methods.date = function (value, element) {
                var isChrome = /Chrome/.test(navigator.userAgent) && /GoogleInc/.test(navigator.vebdor);
                if (isChrome) {
                    var d = new Date();
                    return this.optinal(element) || !/Invalid\NaN/.test(new Date(d.toLocaleDateString(value)));
                } else {
                    return this.optional(element) || !/invalid|NaN/.test(new Date(value));
                }
            };

            $('#PaymandDate').datepicker({
                format: "dd-MM-yyyy",
                language: "pl",
                multidate: false,
                autoclose: true,
                todayHighlight: true,
                forceParse: false
            });
        });
    </script>
}
